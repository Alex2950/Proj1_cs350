STATUS OF IMPLEMENTATION:
Complete, with extra credit (see last section for explanation).

WORK COMPLETED:
Clay: 
shutdown2 syscall

Alex:
mkdir2 syscall
git repo setup

Michael:
exit2 syscall

As a group:
touch syscall, Q&A

DESCRIPTION OF HOW CODE WORKS:
shutdown2 syscall: Works identical to the first shutdown, 
with the addition of needing to get the user's message off of the trap frame.
This is then printed in kernel space before the program shuts down.

mkdir2 syscall: Works similarly to the mkdir system call. The difference is 
two paths and inodes will be used instead of one. As a result create and iunlockput
will each be used twice to create and provide the directories.

exit2 syscall: Works the same as the exit system call but an argument is read from the user as an exit status. An if statement checks if the value is below 0 and if it is, then the function returns -1; otherwise the exit status is printed, and the exit system call continues normally.



Simple working test cases:
shutdown2 hello world
exit 1
mkdir2 hello world 
exit2 20
...
and many more. All syscalls work as laid out in document specs

EXTRA CREDIT:
We created the touch system call in sysfile.c, based on touch in UNIX.
It creates an empty file, which is named by the single user argument passed in.
It is useful when a user doesn't have data to store yet but needs to create the file.
The system call will check if the file already exists as to not overwrite existing data.
If the file does not exist, create will make the file and iunlockput is used to unlock the file.
